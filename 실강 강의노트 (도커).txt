도커

그림 : 고래 등의 컨테이너는 무엇 ? 
= 어플리캐이션. 도커는 컨테이너를 쉽게 쓸 수 있도록 도와주는 기술


수업 목표 :
컨테이너 기술이 무엇인지 살짝 알아본다. 쓸 수 있을 정도.


어플리케이션?
= 우리한테는 배포(deploy)


컨테이너 기술?
= 리눅스/유닉스 커널 위에서 작동하는 작업들을 컨테이너로 구별. 컨테이너(=환경)를 구성해두면, 배포 시에 사용자가 그 환경을 설치 안 해도 됨.
ex) 자바 스프링 배포한다면, 첫 번째로 서버에 자바를 깔고, 스프링(톰캣)을 깔고 ... 일일이 서버 초기 설정을 다 해줘야 함. 하지만 도커를 사용하면, 서버에 도커만 설치하고 컨테이너 설정만 해주면 서버 설정 끝.


컨테이너 기술 전에는...
1) 가상화 기술 : 가상 환경을 만들어서 설정. hypervisor 활용. 하나의 가상 환경에 여러 app을 사용. 성능이 좋지 않음.
2) 컨테이너 기술 : 하나의 컨테이너(환경)에 app 하나. app에 최적화된 환경을 설정할 수 있음.


도커 이론 : 
LXC(리눅스 컨테이너) 기술을 활용
LXC의 핵심 기술은?
1. cgroups - 메모리, cpu 자원에 대한 격리
2. namespaces - 파일, 프로세스 등 격리
이 기술들을 좀 더 쓰기 쉽게 만든 기술 = 도커


gradle build -x test :
"테스트를 스킵한다"는 의미


Dockerfile :
도커의 이미지 파일 생성


docker ps -a
: 모든 도커 파일을 보여준다.


이미지 생성 시 태그를 붙이는 행위
: 일종의 버전 관리


EC2에서 
:
install.sh 생성하고 코드스니펫 복붙, (for docker 설치)
chmod 777 install.sh
./install.sh

EC2에서 한번 exit 해주어야 install.sh 마지막 줄이 적용됨.

docker --version으로 설치 확인
docker -pull {repo명}
docker run --name my-flask -p 5000:5000 -d {리포명}

컨테이너 설정 완료

AWS에서 보안그룹에서 인바운드 규칙에 5000번 포트를 열어줘야 함.

>>> 서버 환경에 python을 설치하지 않아도 python 사용 가능


다중컨테이너
: 컨테이너끼리 통신이 되도록 설정을 해줘야 함.
ex. spring boot - application.properties
