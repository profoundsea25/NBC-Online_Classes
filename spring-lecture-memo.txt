스프링 - 1

스프링을 왜 쓸까요? API를 만드려고!
객체지향이라는 말이 뭘까요?

자바로 API를 만들기 위한 프레임워크

외부의 행사들 / 기술들을 어떻게 썼는지 알려주는 컨퍼런스 많이 가보는게 좋아
테스트 자동화 / 부화 테스트 툴
자바는 트렌드가 느리지만 단단하다

Spring은 톰캣이 필요 > Spring 혼자 API 실행 못해 / Tomcat 은 Spring이 만든 프로세스를 띄워준다
nginx는 정적 언어를 사이트로 만들어주기 위해

Tomcat 우리가 만든 어플리케이션에 대한 프로세스를 계속 띄워주기 위함

프레임웤 자체가 내장 톰캣을 가지고있오

Spring의 레이어가 어떻게 되나요?

Build Tool -> Maven 이냐 Gradle 이냐

컴파일하면 나오는 파일 -> jar

Spring Web -> API 뭐시기 해주는거

제대로 빌드됐으면 build 폴더 하위에 필요 라이브러리 및 코드들 다 있어
build -> .jar로 묶음
*** .jar .war (no .zip) 이유는 ? 
파일이 어떻게 떠어지는지 확인 
컴파일된 파일들을 톰캣에 돌려줘야한다아아, 톰캣때문에 .jar .war 
톰캣에 배포하는 파일의 extension이 .jar .war

11시 경 강의 다시보기 -> 빌드

API를 만드는 가장 중요한 이유 = 데이터를 적재하기 위함
데이터는 기업의 중요한 자산!
목표는 데이터를 적재하고 잘 가공해서 소비자에게 보여주는것

RDBMS는 모든 서비스들의 메인 DB

인메모리 디비 = 서버 내리면 데이터가 없어집니다.

JPA란 뭘까요
JPA = ORM(Object Relational Mapping)

mysql이 엔진인 RDS
관련된 API마다 DB가 물리적으로 나뉜다.

DB가 작아진 형태라 모델링이 많이 필요하지 않고 JPA와 같은 프레임워크를 쓰면 코드로 모델링 가능

빨리빨리 만들어야하는 SI성 프로그램이 많아서 mybatis 를 사용한다
전자정부프레임워크는 mybatis 사용

스프링 - 2


객체 생성 (new) -> 메모리에 올린다
스프링 부트가 시작할때 (부팅할때) 찾아서 메모리에 올려놓는다

DB와 JPA 사이에는 1차 cache 영역

select - cache 
객체가 변경되면 캐시 내용이 바뀌나 ? 객체의 변화를 쫓아가는 너낌

@Retation이 runtime이냐 compile이냐

find하면 캐싱된다. 이렇게 존재하는 것 중에 변경된 내용이 있으면 save 해준다 @Transactional

JPA를 사용하면 이식성이 좋아진다. MySQL에 맞춰 쿼리를 작성하면 후에 Oracle DB로 이주하기 힘듦. 그러나 JPA 이용하면 이런 부분들이 수월해져

Service -> @Retation(Runtime)
Getter -> @Retation(Source)


Spring vs Spring Boot 
WAS 설치 여부
DB 연동 또는 설정같은 부분들의 차이
msa 아키텍쳐처럼 다 돌린다.

DTO? Controller Service 사이의 데이터

Entity 자체를 인자로 넘기는것은 비권장 (Lecture)
Entity를 쓰지 말고 Dto를 써라 / Query를 날리는 것이 아니라면 / DB 연동이 없는데 Lecture(Entity) 객체를 쓰지 마라
|__ 단순히 객체를 생성하는데 Entity Object를 쓰지말깅
|__ Service로 넘겨주는 데이터를 넘겨주기 위해서 Lecture(Entity 성격의 객체->쿼리문이나 데이터베이스 연동을 위해 쓰는건데) 를 사용하지마!!

메소드를 호출할때 레이어마다 데이터를 넘긴다
서비스 레이어는 비즈니스 로직을 따는 레이어
이 레이어에 데이터를 넘겨줘야하는데 이걸 Entity를 쓰는게 맞나? Entity는 Repository 레이어와 연관이 있는데…
그러니까 엔티티를 직접적으로 쓰지 말고 다른 데이터 객체(DTO)를 만들어 써라 


https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#jpa.query-methods



스프링 - 2

프론트에서 다이렉트로 호출? 서버에서 호출 ?
로그로 호출의 기록을 남겨둬야겠다 = 서버
서버쪽에서 외부 API를 호출할 수 있는 내부 API를 만들어서 프론트단에 알려준다.
프론트 단에서 naver api 호출이 필요한 경우 -> 서버쪽 api 호출

AB 테스트? - 오픈 API 내부가 어떻게 돌아가는지 모르니 불안하니까…

메모리를 관리하는 방식이 결국 “싱글톤” 방식으로 한다
자바 JVM 의 메모리에 구역이 어디에 있냐?

개속 new 해서 생기는 메모리 누수를 막으려고옹?

DTO 프론트에서 데이터를 POST로 받을때 많이 써용
바디에 있는 JSON 받을때 RequestDto 많이 쓴다

오버로딩과 오버라이딩의 차이 => 상속 관련된 용어

build 하는거는 작성한 자바코드를 컴퓨터가 알 수 있도록 컴파일 해주는것
-> 소스코드를 컴퓨터가 읽을 수 있게 바이트 코드(1010101)로 바꿔준다.

Run 한다가 뭘까요??
과거
Run 한다 = > .jar 를 WAS 내부에 복사시키고 WAS를 리스타트 시켜주는 것
현재
WAS가 Spinrg-boot에 내장되있기 떄문에 Run만 하면 Running 
내부에서 WAS를 띄워준다 


서버에 deplo할때 $ java -jar .[jar파일]
build하면 .jar 파일이 나오고, WAS에 가서 java -jar 명령어 수행해서 배포


Controller와 RestController의 차이
RestController -> return 되는 부분을 JSON 형식으로 돌려준다
Controller -> render_templates 와 비슷하다


스프링 - 3

@RequiredArgsConstructor - final 변수에 대한 생성자
IoC 컨테이너에 Bean을 담아놓고 주입을 시켜준다

쿠키와 세션

세션(인메모리 데이터베이스)

데이터베이스의 값과 비교하지 않고 세션을 따로 관리하는 이유가 뭐지?

페이지를 이동할때마다 계속 DB에 조회하기에는 리소스적인 부담이 있어서, 서버 메모리 세션에 최초 로그인 시 올려놓는 것

쿠키의 기준 = 도메인

오버라이드 = 부모에 있는 메서드를 재정의한다
(오버로딩은 뭐야?)

SSR 할 수 있는 템플릿 엔진 = Tymeleaf

리소스(css/style.css)에 접근 권한이 없어서 / Spring security에 막힘 (Spring Security - Authentication Filter가 막고있어. 로그인 안됐으니까 CSS는 안돼)

코드를 관리할 수 있는 ‘열거형 클래스(enum)’

Optional 클래스로 한번 래핑을 해주면 NULL 체크를 명확하게 해준다


로그인된 사용자의 정보를 가져오도록 스프링에게 요청하는 것 , 메서드가 호출될 때 사용자 정보를 주입시켜달라 @AuthenticationPricipal

페이지에만 들어가면 JSESSIONID 발급 = 톰캣에서 발급
로그인을 하면 JSESSIONID를 바탕으로 UserImpl 정보들이 SESSION으로 저장
SESSIONID만 클라이온트 - 백엔드 쪽으로 보내줌


토큰 세션 쿠키 

오버로드: 메서드 이름이 같아도 인자가 다른 메서드 정의 가능


브라우저 종료 후 다시 들어갔을 때 발급받은 세션

세션은 Cookie를 이용한 인증 방식 중 하나의 방법일 뿐 - 이 둘은 반대 개념이 아니야 !!!
세션은 쿠키를 기반하고 있지만 ~~


Spring Security 별로 Controller 메서드 별로 권한을 체크하게 한다
UserDetailsImpl = 사용자에 대한 정보를 가지고 옴
getAuthorities를 호출하면 이 유저가 어떤 권한을 가지고 있는지 조회 

Bean으로 올려야하는 Sevice Repository 가 많아질 수록 빌드가 느려져


OAuth = Access Token과 Refresh Token의 차이 

// 로그인을 안했는데 왜 JSESSIONID가 발급되나요?

WAS단에서 처음에 발급해주는 SESSIONID는 WAS가 클라이언트와의 연결을 관리하기 위한, 그들의 내부적인 무언가를 위한 … 그래서 초기에 발급
로그인 후에 SESSIONID가 바뀌는데, WAS가 SESSIONID 바뀜을 관리하는 내부적인 로직이 있을거다.

UserDomain에 소셜 별로 Id를 따로 관리하는게 좋아 - 여러개의 소셜 아이디를 유니크하게 관리하기 위해 (ex. kakaoId)


callback을 요청해서 인증 코드를 받아

스프링 - 4


API를 JUnit 테스트 코드로 테스트

JPA = ORM 기술에 대한 표준 명세
JPA를 더 쉽게 쓰기 위해 만들어놓은 API가 Spring JPA 


영속화 하면 메모리에 할당이 되고 데이터베이스에 저장이 되는것

객체를 메모리에 가지고 있기 때문에 DB와 연동하ㅣㄹ때는 메모리를 효율적으로 사용할 수 있도록
1차 캐시에 영속성 컨텍스트가 찾아서 똑같은 객체가 있으면 똑같이 취급을 한다?

*** 
*** 

save 해야 DB 객체가 영속화가 되고 save를 해야 DB에 객체가 반영돼!!
업데이트 -> 객체 업데이트 후 @Transactional 또는 repository.save


더 권장되는 방법 @Transactional
메서드는 하나의 ‘커밋’단위
중간에 오류가 났을때 rollback
데이터의 정합성을 맞추기 위해

ex 장바구니 삭제 / 장바구니 상품 삭제


영속성 트랜잭션 ( + JPA ) ?

객체와 DB 데이터를 어떻게 잘 관리하는지

*** 
*** 

Seed까지는 아니고 Serise A

스프링 - 5

ORM은 객체들의 연관관계가 눈에 보여야해
JPA를 사용해서 데이터베이스 데이터들의 연관관계를 볼 수 있음

SQL 쿼리문들은 JPA에서 자동으로 만들어준다.

AOP는 부가기능을 모듈화 시켜주는 것

트랜잭션 = 데이터베이스의 작업 처리를 묶는 것

비즈니스 로직을 실행하는 하나의 단위를 트랜잭션으로 묶어주는 것

트랜잭션이 잘 이뤄지지 않으면 데이터 정합성이 맞지 않음

API가 controller로 나뉘어져 있기 때문에 글로벌로 처리할 수 있어야한다 .

HTTP 

스프링 - 6

scale out 은 (똑같은) 서버를 여러개로 늘리는 것
대신에 트래픽을 밸런싱 해야하는 로드 밸런스가 앞단에 있음 (로드 밸런스가 엔드 포인트)
서버 확장 = scale out

장점? 실시간 확장

scale up = 서버의 성능 높이기
더 좋은 성능의 새로운 서버 생성하고 그쪽으로 바꾸기
클라우드가 없을때 많이 사용

자동배포 왜 ? 수정사항이 많아졌다. 고객의 니즈에 빠르게 대응하려고
업데이트를 몰아서 하게되면 에러가 났을 때 유지보수가 힘들어서 , 사이드 이펙트가 어디에서 나왔는지 몰라
|__ 자동화된 테스트케이스를 만들어야해 / 로직을 고칠때 마다 전체 테스트 불가능

WAS 메모리 복제

도메인이 다르면 쿠키를 사용을 못해요
로그인이 필요한 API 를 요청할 때 마다 요청 헤더의 Authorization 값에 토큰 값을 넣어 요청을 보내 - "stateless” 똑같은 동작 - 첫번째시간 완전 마지막

세션의 문제점 해결 방안 - Redis를 쓰던지 토큰을 쓰던지
Spring Cloud GCP spring.io/projects/cloud-? spring redis 있음

모바일과 호환 - 모바일에는 쿠키가 없기 때문에 - 네이티브에는 쿠키가 없어

Session / server side rendering = 테스트 자동화 문제
로그인 관련된 부분은 로그인을 해야 API를 호출할 수 있는데 ㅇㅅㅇ
session이라는 stateful(서버 입장에서 세션을 가지고 있어야하니까)이라는 상태가 들어가야 하니까 테스트 하기 힘들어

프론트단을 고쳐도 서버에 자동 리로드 되게 tymleaf cache = false

application.properties 가 여러개일거다. 테스트에 관한 / 운용서버에 관한 application.properties
데이터베이스나 이런게 다를텐데 이런 다른 설정값을 application.properties에 넣을 수 있다.
프로그램에서는 직접 설정값을 넣지 않고 properties를 참조해서 할당할 수 있도록 코드상에 명시할 수 있다. 

세션을 걷어내면서 서버사이드 렌더링도 걷어내는 작업을 한다

WebSecurityConfig / jwtRequestFilter 컨트롤러 앞단에서 필터 기능을 할 수 있는 클래스
폼방식이 아니라 API 호출하는 방식

location.href = 화면 라우터

Bearer 는 일반적으로 토큰의 앞단에 프리픽스처럼 붙여서 보낸다

AOP랑 필터가 비슷한 면이 있지만 좀 다르다

모듈화 되있기 때문에 바꾸는게 어렵지 않았다 … ?
 Session을 제거하고 JWT 토큰으로 뭘 할 수 있기 때문에 좋앙

로지텍 mx vertical 인체공학 무선 마우스

코드를 받고 리다이렉트해서 코드로 토큰을 다시 받았다.
콜백 URL 없게 하려면 프론트에서 토큰을 받아 던져주는 식으로
코드를 받는 콜백 URL이 생략된다

토큰 자체를 내려 받는 방식 = 모바일의 방식

코드를 받는 이유 = 토큰을 받기 위해, 토큰을 만들려면 코드가 있어야하고, 코드로 
백단에서 코드를 받는 것들이 사라진다.
백단에서 콜백을 받으면 토큰을 바로 주는 것 보다 코드를 주고 한번 더 찌르게 함으로써 보안상에 나을듯?

모바일단의 라이브러리에서 토큰을 발급해줌 == 프론트 단에서 access_token을 넘겨줌 = 그래서 토큰 발급을 위한 백엔드 콜백 없애도 괜츈

카카오 로그인도 jwt로 바꿈 = stateless하게

테스트 코드가 있어야 api 문서 생성 가능 , 테스트 강제됨

인메모리에 있는 프로파일즈(application-text.properties)를 쓸거야


step into - 내가 작성한 함수 내부
force step into - jdk 내장 클래스 내부로 까지 가능

lombok의 디버깅 어렵다 - force step into 로도 안돼 @어노테이션 을 다 디버깅 할 수 없자너??

변수 값 뿐만 아니라 watch 창에서 메서드 값도 확인할 수 있다.
